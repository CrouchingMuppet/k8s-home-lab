---
- name: Install prerequisite packages
  ansible.builtin.package:
    name: jq
  when: inventory_hostname in groups['pve']

- name: Create OKD installer config
  ansible.builtin.template:
    src: install-config.yaml.j2
    dest: "{{ persistence_folder }}/install-config.yaml"
    mode: "0600"

# Unraid has no libssl which python needs to use get_url module
- name: OpenShift installer
  block:
    - name: Download OpenShift installer # noqa: command-instead-of-module
      ansible.builtin.command:
        cmd: "curl -L -o {{ persistence_folder }}/openshift-install.tar.gz {{ openshift_install_url }}"
        creates: "{{ persistence_folder }}/openshift-install.tar.gz"
  rescue:
    - name: Delete OpenShift installer
      ansible.builtin.file:
        path: "{{ persistence_folder }}/openshift-install.tar.gz"
        state: absent

- name: Extract OpenShift tools
  ansible.builtin.unarchive:
    src: "{{ persistence_folder }}/openshift-install.tar.gz"
    dest: "/usr/local/bin"
    remote_src: true
    creates: /usr/local/bin/openshift-install

- name: Find coreos image url
  ansible.builtin.shell: |
    set -o pipefail
    VERSION=scos-$(openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.qemu.release')-qemu.x86_64.qcow2
    openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.qemu.formats."qcow2.gz".disk.location'
  register: coreos_url
  changed_when: false

# Unraid has no libssl which python needs to use get_url module
- name: Core OS image
  block:
    - name: Download scos image # noqa: command-instead-of-module
      ansible.builtin.command:
        cmd: "curl -L -o {{ persistence_folder }}/scos.qcow2.gz {{ coreos_url.stdout }}"
        creates: "{{ persistence_folder }}/scos.qcow2.gz"
  rescue:
    - name: Delete scos image
      ansible.builtin.file:
        path: "{{ persistence_folder }}/scos.qcow2.gz"
        state: absent

# unarchive module does not support gzip content without tar
- name: Extract coreos image
  ansible.builtin.command:
    cmd: gzip -dk {{ persistence_folder }}/scos.qcow2.gz
    creates: "{{ persistence_folder }}/scos.qcow2"

- name: Ignition files
  block:
    - name: Create ignition folder
      ansible.builtin.file:
        path: "{{ ignition_folder }}"
        state: directory
        mode: "0755"
    - name: Create ignition configs
      ansible.builtin.shell:
        chdir: "{{ ignition_folder }}"
        cmd: |
          cp ../install-config.yaml .
          openshift-install create manifests
          openshift-install create ignition-configs
        creates: bootstrap.ign
  rescue:
    - name: Delete ignition folder
      ansible.builtin.file:
        path: "{{ ignition_folder }}"
        state: absent

- name: Apply kube configuration
  ansible.builtin.fetch:
    src: "{{ ignition_folder }}/auth/kubeconfig"
    dest: ~/.kube/config
    flat: true

- name: Fetch the admin password
  ansible.builtin.fetch:
    src: "{{ ignition_folder }}/auth/kubeadmin-password"
    dest: kubeadmin-password.txt
    flat: true
    mode: "0600"

- name: Create virtual machines (PVE)
  ansible.builtin.include_tasks:
    file: pve.yml
  when: inventory_hostname in groups['pve']

- name: Create virtual machines (Unraid)
  ansible.builtin.include_tasks:
    file: unraid.yml
  when: inventory_hostname in groups['unraid']
